name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: macos-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-x64

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Build binary
      run: |
        deno compile --allow-run --allow-read --allow-write \
          --output git-backup-${{ matrix.suffix }} \
          --target ${{ matrix.target }} \
          mod.ts

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: git-backup-${{ matrix.suffix }}
        path: git-backup-${{ matrix.suffix }}

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in ./artifacts/*/git-backup-*; do
          filename=$(basename "$file")
          echo "Uploading $filename"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "${{ steps.create_release.outputs.upload_url }}?name=$filename"
        done